# stats.py - –ö–æ–≥ –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

import discord
from discord.ext import commands, tasks
import re
from datetime import datetime
import pytz
import os

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
try:
    REPORT_CHANNEL_ID = int(os.environ['REPORT_CHANNEL_ID'])
    TIMEZONE = pytz.timezone('Europe/Kiev')
except KeyError as e:
    print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –ö–û–ì–ï STATS: –°–µ–∫—Ä–µ—Ç '{e.args[0]}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    # –í—ã—Ö–æ–¥ –Ω–µ –¥–µ–ª–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —É—Ä–æ–Ω–∏—Ç—å –≤—Å–µ–≥–æ –±–æ—Ç–∞

daily_stats = {}

def ensure_user_stats(user_id):
    if user_id not in daily_stats:
        daily_stats[user_id] = {
            'messages': 0, 'images': 0, 'files': 0,
            'youtube_links': 0, 'other_links': 0, 'reactions_given': 0
        }

class StatsCog(commands.Cog):
    def __init__(self, client):
        self.client = client
        self.generate_daily_report.start()

    def cog_unload(self):
        self.generate_daily_report.cancel()

    @commands.Cog.listener()
    async def on_message(self, message):
        if message.author.bot or message.content.lower().strip() in ['–æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç', '–≥–∞—Ä—Ä–∏, —Ç—ã —Ç—É—Ç?']:
            return
        
        user_id = message.author.id
        ensure_user_stats(user_id)
        daily_stats[user_id]['messages'] += 1
        
        urls = re.findall(r'https?://[^\s]+', message.content)
        for url in urls:
            if 'youtube.com' in url or 'youtu.be' in url:
                daily_stats[user_id]['youtube_links'] += 1
            else:
                daily_stats[user_id]['other_links'] += 1
        
        if message.attachments:
            for attachment in message.attachments:
                if attachment.content_type and 'image' in attachment.content_type:
                    daily_stats[user_id]['images'] += 1
                else:
                    daily_stats[user_id]['files'] += 1

    @commands.Cog.listener()
    async def on_reaction_add(self, reaction, user):
        if user.bot:
            return
        ensure_user_stats(user.id)
        daily_stats[user.id]['reactions_given'] += 1

    @tasks.loop(minutes=1)
    async def generate_daily_report(self):
        now = datetime.now(TIMEZONE)
        if now.hour == 22 and now.minute == 0:
            if not hasattr(self.generate_daily_report, "last_run_date") or self.generate_daily_report.last_run_date != now.date():
                report_channel = self.client.get_channel(REPORT_CHANNEL_ID)
                if report_channel:
                    await self.send_report(report_channel)
                    self.generate_daily_report.last_run_date = now.date()

    async def send_report(self, channel):
        global daily_stats
        embed = discord.Embed(
            title=f"üìä –°—É—Ç–æ—á–Ω—ã–π –æ—Ç—á–µ—Ç {datetime.now(TIMEZONE).strftime('%d.%m.%Y')}",
            color=discord.Color.blue()
        )
        if not daily_stats:
            embed.description = "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Ü–∞—Ä–∏–ª–∞ –º–µ–¥–∏—Ç–∞—Ç–∏–≤–Ω–∞—è —Ç–∏—à–∏–Ω–∞."
        else:
            # –õ–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ (—Å–æ–∫—Ä–∞—â–µ–Ω–∞ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏)
            embed.description = "–û—Ç—á–µ—Ç –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏..."
        await channel.send(embed=embed)
        daily_stats = {}

    @generate_daily_report.before_loop
    async def before_daily_report(self):
        await self.client.wait_until_ready()

async def setup(client):
    await client.add_cog(StatsCog(client))