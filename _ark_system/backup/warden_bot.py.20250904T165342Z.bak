# -*- coding: utf-8 -*-
# warden_bot.py - Точка входа (v2.1 - Cog Fix)

import discord
import os
import asyncio
from discord.ext import commands
from flask import Flask
from threading import Thread

# --- КОНФИГУРАЦИЯ ---
try:
    TOKEN = os.environ['DISCORD_BOT_TOKEN']
except KeyError:
    print("!!! КРИТИЧЕСКАЯ ОШИБКА: Секрет 'DISCORD_BOT_TOKEN' не найден.")
    exit()

# --- ВЕБ-СЕРВЕР ДЛЯ UPTIMEROBOT ---
app = Flask('')
@app.route('/')
def home():
    return "I'm alive"

def run_web_server():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run_web_server)
    t.start()

# --- НАСТРОЙКА БОТА И КОГОВ ---
intents = discord.Intents.default()
intents.message_content = True
intents.reactions = True
intents.members = True

class WardenBot(commands.Bot):
    def __init__(self):
        # Префикс команд не нужен для on_message, но обязателен для commands.Bot
        super().__init__(command_prefix='!', intents=intents)

    async def setup_hook(self) -> None:
        cogs_path = 'projects.Warden._src.cogs'
        for filename in os.listdir('./projects/Warden/_src/cogs'):
            if filename.endswith('.py') and not filename.startswith('__'):
                try:
                    await self.load_extension(f'{cogs_path}.{filename[:-3]}')
                    print(f'Загружен ког: {filename}')
                except Exception as e:
                    print(f'Ошибка загрузки кога {filename}: {e}')
        print('------')

    async def on_ready(self):
        print(f'Бот {self.user} успешно запущен!')
        print('------')

client = WardenBot()

# --- ЗАПУСК ВСЕГО ---
async def main():
    async with client:
        keep_alive()
        await client.start(TOKEN)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"!!! КРИТИЧЕСКАЯ ОШИБКА при запуске бота: {e}")